// <auto-generated />
using System;
using Booking_Backend.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Booking_Backend.Data.Migrations
{
    [DbContext(typeof(BookingContext))]
    [Migration("20240328164954_AddFieldThumbnailInHotelEF")]
    partial class AddFieldThumbnailInHotelEF
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Booking_Backend.Data.Entities.AppConfig", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("AppConfigs");
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("265e11da-bc22-4fe7-b286-493d6a09d46f"),
                            ConcurrencyStamp = "3ed40fa6-a73e-489a-abc9-8087543e1cb9",
                            Description = "Quản trị viên - quản lí tài khoản và kiểm duyệt người dùng",
                            Name = "Administrators",
                            NormalizedName = "ADMINISTRATORS"
                        },
                        new
                        {
                            Id = new Guid("f0404419-a456-4cd6-a8bc-e19c246904c5"),
                            ConcurrencyStamp = "d9342ddb-06aa-4043-b229-162fefb05394",
                            Description = "Chủ sở hữu - quản lí tài sản cá nhân, đăng bài và quản lí khách hàng",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = new Guid("1f10d63e-c240-4be5-a95b-b868c41501dd"),
                            ConcurrencyStamp = "8401a181-1b82-47dc-af6c-1339e33b0760",
                            Description = "Khách hàng đăng nhập - quản lí tài khoản cá nhân và thuê phòng",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = new Guid("ad9c3bfc-fd01-4696-b8c8-0ce10e6a3632"),
                            ConcurrencyStamp = "b6b12a8c-4590-415d-965d-46e88f454465",
                            Description = "Người dùng duyệt web - xem thông tin khách sạn",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 3, 28, 16, 49, 53, 858, DateTimeKind.Utc).AddTicks(1715));

                    b.Property<int>("Dashboard")
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nation")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b5e9ebbd-fd85-4ad0-b820-0aa8105ebdd2"),
                            AccessFailedCount = 0,
                            Address = "An Phú, An Hòa, Châu Thành, An Giang",
                            Birthday = new DateTime(2002, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "12214cbf-56c1-4391-a990-aadf5016c632",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dashboard = 352642218,
                            DisplayName = "Hà Vĩ Khang",
                            Email = "hvikhang_21th@student.agu.edu.vn",
                            EmailConfirmed = true,
                            FirstName = "Vĩ",
                            Gender = "Nam",
                            LastName = "Khang",
                            LockoutEnabled = false,
                            Nation = "Việt Nam",
                            NormalizedEmail = "hvikhang_21th@student.agu.edu.vn",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAENuAt72LfbpiC5UBoEl45f8hvU8DEBJdGrh7UObDWI8P8zo64nEAB8p9cTg2UrzOKA==",
                            PhoneNumber = "0339141910",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("31ff741e-5a2a-4afd-8448-7dc59c03a5b6"),
                            AccessFailedCount = 0,
                            Address = "Châu Phong, Tân Châu, An Giang",
                            Birthday = new DateTime(2002, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "8c6d62ea-bac4-4952-8950-061a748bc53b",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dashboard = 354261197,
                            DisplayName = "Hà Thị Mỹ Tiên",
                            Email = "htmtien_21av@student.agu.edu.vn",
                            EmailConfirmed = true,
                            FirstName = "Mỹ",
                            Gender = "Nu",
                            LastName = "Tiên",
                            LockoutEnabled = false,
                            Nation = "Việt Nam",
                            NormalizedEmail = "htmtien_21av@student.agu.edu.vn",
                            NormalizedUserName = "MYTIEN",
                            PasswordHash = "AQAAAAEAACcQAAAAEB4+w6NdUKQ3vGw2+BQqA1DkPO2PwsInmPiHu7UGcq8w0g0Mpw/wzOZO5x8r8u5l0A==",
                            PhoneNumber = "0357642951",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "MyTien"
                        });
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.Bed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("Beds");

                    b.HasData(
                        new
                        {
                            Id = 1
                        },
                        new
                        {
                            Id = 2
                        });
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.BedTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Bed_Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language_Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Bed_Id");

                    b.ToTable("BedTranslations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bed_Id = 1,
                            Description = "Một giường 1m x 1.2m",
                            Language_Id = "vi-VN",
                            Name = "Giường đơn"
                        },
                        new
                        {
                            Id = 2,
                            Bed_Id = 1,
                            Description = "One bed 1m x 1.2m",
                            Language_Id = "en-US",
                            Name = "Single Bed"
                        },
                        new
                        {
                            Id = 3,
                            Bed_Id = 2,
                            Description = "Một giường nhỏ 1.5m x 1.2m",
                            Language_Id = "vi-VN",
                            Name = "Giường đôi nhỏ"
                        },
                        new
                        {
                            Id = 4,
                            Bed_Id = 2,
                            Description = "One small double bed 1.5m x 2m",
                            Language_Id = "en-US",
                            Name = "Double Bed"
                        });
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CheckIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 3, 28, 16, 49, 53, 878, DateTimeKind.Utc).AddTicks(413));

                    b.Property<DateTime>("CheckOut")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 3, 28, 16, 49, 53, 878, DateTimeKind.Utc).AddTicks(613));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 3, 28, 16, 49, 53, 878, DateTimeKind.Utc).AddTicks(41));

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("TotalAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<Guid>("User_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 3, 28, 16, 49, 53, 881, DateTimeKind.Utc).AddTicks(1061));

                    b.Property<int>("Hotel_Id")
                        .HasColumnType("int");

                    b.Property<Guid>("User_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Hotel_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.Extension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExtensionType_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExtensionType_Id");

                    b.ToTable("Extensions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExtensionType_Id = 1
                        },
                        new
                        {
                            Id = 2,
                            ExtensionType_Id = 2
                        });
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.ExtensionTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Extension_Id")
                        .HasColumnType("int");

                    b.Property<string>("Language_Id")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Extension_Id");

                    b.ToTable("ExtensionTranslations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Extension_Id = 1,
                            Language_Id = "vi-VN",
                            Name = "Giấy vệ sinh"
                        },
                        new
                        {
                            Id = 2,
                            Extension_Id = 1,
                            Language_Id = "en-US",
                            Name = "Toilet paper"
                        },
                        new
                        {
                            Id = 3,
                            Extension_Id = 2,
                            Language_Id = "vi-VN",
                            Name = "Ra trải giường"
                        },
                        new
                        {
                            Id = 4,
                            Extension_Id = 2,
                            Language_Id = "en-US",
                            Name = "Bedspread"
                        });
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.ExtensionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("ExtensionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1
                        },
                        new
                        {
                            Id = 2
                        });
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.ExtensionTypeTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExtensionType_Id")
                        .HasColumnType("int");

                    b.Property<string>("Language_Id")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ExtensionType_Id");

                    b.ToTable("ExtensionTypeTranslations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExtensionType_Id = 1,
                            Language_Id = "vi-VN",
                            Name = "Phòng tắm"
                        },
                        new
                        {
                            Id = 2,
                            ExtensionType_Id = 1,
                            Language_Id = "en-US",
                            Name = "Bathroom"
                        },
                        new
                        {
                            Id = 3,
                            ExtensionType_Id = 2,
                            Language_Id = "vi-VN",
                            Name = "Phòng ngủ"
                        },
                        new
                        {
                            Id = 4,
                            ExtensionType_Id = 2,
                            Language_Id = "en-US",
                            Name = "Bedroom"
                        });
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Establish")
                        .HasColumnType("date");

                    b.Property<int>("HotelType_Id")
                        .HasColumnType("int");

                    b.Property<string>("Hotline")
                        .HasColumnType("varchar(11)");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal");

                    b.Property<int?>("Location_Id")
                        .HasColumnType("int");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewHotel_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HotelType_Id");

                    b.HasIndex("Location_Id");

                    b.HasIndex("ViewHotel_Id");

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Establish = new DateTime(2002, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelType_Id = 1,
                            Hotline = "02963678333",
                            Latitude = 0m,
                            Longitude = 0m,
                            ViewHotel_Id = 2
                        },
                        new
                        {
                            Id = 2,
                            Establish = new DateTime(2002, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelType_Id = 1,
                            Hotline = "02963678463",
                            Latitude = 0m,
                            Longitude = 0m,
                            ViewHotel_Id = 1
                        });
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.HotelTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Hotel_Id")
                        .HasColumnType("int");

                    b.Property<string>("Language_Id")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Hotel_Id");

                    b.ToTable("HotelTranslations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "12 đường Bà Triệu, Đà Lạt",
                            Area = "Đà Lạt",
                            Description = "Khách sạn Lê Tuấn Minh",
                            Hotel_Id = 1,
                            Language_Id = "vi-VN",
                            Name = "Khách sạn Lê Tuấn Minh"
                        },
                        new
                        {
                            Id = 2,
                            Address = "12 Ba Trieu Street, Da Lat",
                            Area = "Da Lat",
                            Description = "Le Minh Tuan Hotel",
                            Hotel_Id = 1,
                            Language_Id = "en-US",
                            Name = "Le Minh Tuan Hotel"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Côn Đảo, Vũng Tàu",
                            Area = "Vũng Tàu",
                            Description = "Khách sạn Moon House",
                            Hotel_Id = 2,
                            Language_Id = "vi-VN",
                            Name = "Khách sạn Moon House"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Con Dao, Vung Tau",
                            Area = "Vung Tau",
                            Description = "Moon House Hotel",
                            Hotel_Id = 2,
                            Language_Id = "en-US",
                            Name = "Moon House Hotel"
                        });
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.HotelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HotelTypeImage_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HotelTypeImage_Id")
                        .IsUnique();

                    b.ToTable("HotelTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HotelTypeImage_Id = 1
                        },
                        new
                        {
                            Id = 2,
                            HotelTypeImage_Id = 2
                        });
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.HotelTypeImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 3, 28, 16, 49, 53, 929, DateTimeKind.Utc).AddTicks(9548));

                    b.Property<decimal>("ImageSize")
                        .HasColumnType("decimal");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("isDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.ToTable("HotelTypeImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Caption = "caption hoteltype img 1",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageSize = 111m,
                            ImageUrl = "imgrl hoteltype 1",
                            isDefault = false
                        },
                        new
                        {
                            Id = 2,
                            Caption = "caption hoteltype img 2",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageSize = 222m,
                            ImageUrl = "imgrl hoteltype 2",
                            isDefault = false
                        });
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.HotelTypeTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HotelType_Id")
                        .HasColumnType("int");

                    b.Property<string>("Language_Id")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("HotelType_Id");

                    b.ToTable("HotelTypeTranslations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HotelType_Id = 1,
                            Language_Id = "vi-VN",
                            Name = "Khách sạn"
                        },
                        new
                        {
                            Id = 2,
                            HotelType_Id = 1,
                            Language_Id = "en-US",
                            Name = "Hotel"
                        },
                        new
                        {
                            Id = 3,
                            HotelType_Id = 2,
                            Language_Id = "vi-VN",
                            Name = "Nhà nghỉ"
                        },
                        new
                        {
                            Id = 4,
                            HotelType_Id = 2,
                            Language_Id = "en-US",
                            Name = "Lodging"
                        });
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.Hotel_Service", b =>
                {
                    b.Property<int>("Hotel_Id")
                        .HasColumnType("int");

                    b.Property<int>("Service_Id")
                        .HasColumnType("int");

                    b.Property<bool>("Surcharge")
                        .HasColumnType("bit");

                    b.HasKey("Hotel_Id", "Service_Id");

                    b.HasIndex("Service_Id");

                    b.ToTable("Hotel_Services");
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 3, 28, 16, 49, 53, 912, DateTimeKind.Utc).AddTicks(2152));

                    b.Property<int>("Hotel_Id")
                        .HasColumnType("int");

                    b.Property<decimal>("ImageSize")
                        .HasColumnType("decimal");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Hotel_Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.Language", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(5)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = "vi-VN",
                            IsDefault = true,
                            Name = "Tiếng Việt"
                        },
                        new
                        {
                            Id = "en-US",
                            IsDefault = false,
                            Name = "English"
                        });
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Properties")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.LocationTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Language_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Location_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Location_Id");

                    b.ToTable("LocationTranslation");
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Bed_Id")
                        .HasColumnType("int");

                    b.Property<int>("Hotel_Id")
                        .HasColumnType("int");

                    b.Property<int>("Maximum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal>("PriceByHour")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("PriceOverNight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("RoomCode")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RoomType_Id")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("Bed_Id");

                    b.HasIndex("Hotel_Id");

                    b.HasIndex("RoomType_Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = 1
                        },
                        new
                        {
                            Id = 2
                        });
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.RoomTypeTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Language_Id")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RoomType_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomType_Id");

                    b.ToTable("RoomTypeTranslations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Language_Id = "vi-VN",
                            Name = "Phòng Standard",
                            RoomType_Id = 1
                        },
                        new
                        {
                            Id = 2,
                            Language_Id = "en-US",
                            Name = "Standard Room",
                            RoomType_Id = 1
                        },
                        new
                        {
                            Id = 3,
                            Language_Id = "vi-VN",
                            Name = "Phòng Superior",
                            RoomType_Id = 2
                        },
                        new
                        {
                            Id = 4,
                            Language_Id = "en-US",
                            Name = "Superior Room",
                            RoomType_Id = 2
                        });
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.Room_Booking", b =>
                {
                    b.Property<int>("Room_Id")
                        .HasColumnType("int");

                    b.Property<int>("Booking_Id")
                        .HasColumnType("int");

                    b.HasKey("Room_Id", "Booking_Id");

                    b.HasIndex("Booking_Id");

                    b.ToTable("Room_Bookings");
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.Room_Extension", b =>
                {
                    b.Property<int>("Room_Id")
                        .HasColumnType("int");

                    b.Property<int>("Extension_Id")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Room_Id", "Extension_Id");

                    b.HasIndex("Extension_Id");

                    b.ToTable("Room_Extensions");
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.ServiceHotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("ServiceHotels");

                    b.HasData(
                        new
                        {
                            Id = 1
                        },
                        new
                        {
                            Id = 2
                        });
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.ServiceHotelTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language_Id")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceHotel_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceHotel_Id");

                    b.ToTable("ServiceHotelTranslations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Có phụ thu lấy quần áo sau 24h",
                            Language_Id = "vi-VN",
                            Name = "Giặt và ủi quần áo",
                            ServiceHotel_Id = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "There is an additional charge for picking up clothes after 24 hours",
                            Language_Id = "en-US",
                            Name = "Wash and iron clothes",
                            ServiceHotel_Id = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Không phụ thu, mỗi ngày một thực đơn",
                            Language_Id = "vi-VN",
                            Name = "Cung cấp đồ ăn sáng",
                            ServiceHotel_Id = 2
                        },
                        new
                        {
                            Id = 4,
                            Description = "No extra charge, one menu every day",
                            Language_Id = "en-US",
                            Name = "Provide breakfast",
                            ServiceHotel_Id = 2
                        });
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.UserImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 3, 28, 16, 49, 53, 928, DateTimeKind.Utc).AddTicks(4060));

                    b.Property<decimal>("ImageSize")
                        .HasColumnType("decimal");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("User_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("User_Id");

                    b.ToTable("UserImages");
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.ViewHotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("ViewHotels");

                    b.HasData(
                        new
                        {
                            Id = 1
                        },
                        new
                        {
                            Id = 2
                        });
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.ViewHotelTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language_Id")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ViewHotel_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ViewHotel_Id");

                    b.ToTable("ViewHotelTranslations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Language_Id = "vi-VN",
                            Name = "Bãi biển",
                            ViewHotel_Id = 1
                        },
                        new
                        {
                            Id = 2,
                            Language_Id = "en-US",
                            Name = "Beach",
                            ViewHotel_Id = 1
                        },
                        new
                        {
                            Id = 3,
                            Language_Id = "vi-VN",
                            Name = "Trung tâm thành phố",
                            ViewHotel_Id = 2
                        },
                        new
                        {
                            Id = 4,
                            Language_Id = "en-US",
                            Name = "City center",
                            ViewHotel_Id = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("b5e9ebbd-fd85-4ad0-b820-0aa8105ebdd2"),
                            RoleId = new Guid("265e11da-bc22-4fe7-b286-493d6a09d46f")
                        },
                        new
                        {
                            UserId = new Guid("31ff741e-5a2a-4afd-8448-7dc59c03a5b6"),
                            RoleId = new Guid("1f10d63e-c240-4be5-a95b-b868c41501dd")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.BedTranslation", b =>
                {
                    b.HasOne("Booking_Backend.Data.Entities.Bed", "Bed")
                        .WithMany("BedTranslations")
                        .HasForeignKey("Bed_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.Booking", b =>
                {
                    b.HasOne("Booking_Backend.Data.Entities.AppUser", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.Comment", b =>
                {
                    b.HasOne("Booking_Backend.Data.Entities.Hotel", "Hotel")
                        .WithMany("Comments")
                        .HasForeignKey("Hotel_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booking_Backend.Data.Entities.AppUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.Extension", b =>
                {
                    b.HasOne("Booking_Backend.Data.Entities.ExtensionType", "ExtensionType")
                        .WithMany("Extensions")
                        .HasForeignKey("ExtensionType_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.ExtensionTranslation", b =>
                {
                    b.HasOne("Booking_Backend.Data.Entities.Extension", "Extension")
                        .WithMany("ExtensionTranslations")
                        .HasForeignKey("Extension_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.ExtensionTypeTranslation", b =>
                {
                    b.HasOne("Booking_Backend.Data.Entities.ExtensionType", "ExtensionType")
                        .WithMany("ExtensionTypeTranslations")
                        .HasForeignKey("ExtensionType_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.Hotel", b =>
                {
                    b.HasOne("Booking_Backend.Data.Entities.HotelType", "HotelType")
                        .WithMany("Hotels")
                        .HasForeignKey("HotelType_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booking_Backend.Data.Entities.Location", "Location")
                        .WithMany("Hotels")
                        .HasForeignKey("Location_Id");

                    b.HasOne("Booking_Backend.Data.Entities.ViewHotel", "ViewHotel")
                        .WithMany("Hotels")
                        .HasForeignKey("ViewHotel_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.HotelTranslation", b =>
                {
                    b.HasOne("Booking_Backend.Data.Entities.Hotel", "Hotel")
                        .WithMany("HotelTranslations")
                        .HasForeignKey("Hotel_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.HotelType", b =>
                {
                    b.HasOne("Booking_Backend.Data.Entities.HotelTypeImage", "HotelTypeImage")
                        .WithOne("HotelType")
                        .HasForeignKey("Booking_Backend.Data.Entities.HotelType", "HotelTypeImage_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.HotelTypeTranslation", b =>
                {
                    b.HasOne("Booking_Backend.Data.Entities.HotelType", "HotelType")
                        .WithMany("HotelTypeTranslations")
                        .HasForeignKey("HotelType_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.Hotel_Service", b =>
                {
                    b.HasOne("Booking_Backend.Data.Entities.Hotel", "Hotel")
                        .WithMany("Hotel_Services")
                        .HasForeignKey("Hotel_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booking_Backend.Data.Entities.ServiceHotel", "Service")
                        .WithMany("Hotel_Services")
                        .HasForeignKey("Service_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.Image", b =>
                {
                    b.HasOne("Booking_Backend.Data.Entities.Hotel", "Hotel")
                        .WithMany("Images")
                        .HasForeignKey("Hotel_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.LocationTranslation", b =>
                {
                    b.HasOne("Booking_Backend.Data.Entities.Location", "Location")
                        .WithMany("LocationTranslations")
                        .HasForeignKey("Location_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.Room", b =>
                {
                    b.HasOne("Booking_Backend.Data.Entities.Bed", "Bed")
                        .WithMany("Rooms")
                        .HasForeignKey("Bed_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booking_Backend.Data.Entities.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("Hotel_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booking_Backend.Data.Entities.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomType_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.RoomTypeTranslation", b =>
                {
                    b.HasOne("Booking_Backend.Data.Entities.RoomType", "RoomType")
                        .WithMany("RoomTypeTranslations")
                        .HasForeignKey("RoomType_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.Room_Booking", b =>
                {
                    b.HasOne("Booking_Backend.Data.Entities.Booking", "Booking")
                        .WithMany("Room_Bookings")
                        .HasForeignKey("Booking_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booking_Backend.Data.Entities.Room", "Room")
                        .WithMany("Room_Bookings")
                        .HasForeignKey("Room_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.Room_Extension", b =>
                {
                    b.HasOne("Booking_Backend.Data.Entities.Extension", "Extension")
                        .WithMany("Room_Extensions")
                        .HasForeignKey("Extension_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booking_Backend.Data.Entities.Room", "Room")
                        .WithMany("Room_Extensions")
                        .HasForeignKey("Room_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.ServiceHotelTranslation", b =>
                {
                    b.HasOne("Booking_Backend.Data.Entities.ServiceHotel", "ServiceHotel")
                        .WithMany("ServiceHotelTranslations")
                        .HasForeignKey("ServiceHotel_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.UserImage", b =>
                {
                    b.HasOne("Booking_Backend.Data.Entities.AppUser", "User")
                        .WithMany("UserImages")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booking_Backend.Data.Entities.ViewHotelTranslation", b =>
                {
                    b.HasOne("Booking_Backend.Data.Entities.ViewHotel", "ViewHotel")
                        .WithMany("ViewHotelTranslations")
                        .HasForeignKey("ViewHotel_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
